//; run test
//; Read Result
//#include "i_ReadMemWord.edt" 4400 5555 FFFF
//;*****************************************************************************
//; EDT Macro for JTAG/EEM verification
//; Name:        ReadMemWord
//; Description:
//; This macro reads one word from a dedicated memory address.
//; Parameter:
//;  $1 : Address to be read from (20bit)
//;  $2 : Expected Data value (16bit)
//;  $3 : Mask for expected Data value (16bit)
//;*****************************************************************************
//;
//;          _________                    _____             _____       ______
//; IFCLK             |__________________|     |___________|     |_____|
//;
//; BYTE     XXXXXXXXXXXXXXX__________________________________________________
//;                         __________________________________________________
//; RW       XXXXXXXXXXXXXXX
//;                                 _________________
//; MAB      XXXXXXXXXXXXXXXXXXXXXXX_________________XXXXXXXXXXXXXXXXXXXXXXXXX
//;                                        __________________
//; MDB      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX__________________XXXXXXXXXXXXXXXXX
//;
//;            CHK    TCLK  SET    SET   TCLK  TCLK  CHK   TCLK  TCLK  TCLK
//;            CNTRL  0     CNTRL  ADDR  1     0     DATA  1     0     1
//;
//; EDT syntax
//;    // Check Init State
// CNTRL_SIG_CAPTURE B:0x14
//JTAGCmd_following
                 > JTAG              1 1 1 1 X 1  ; // CNTRL_SIG_CAPTURE
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 0 H 1  ; //-----LSB
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 1 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 1 0 H 1  ; //-----MSB
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; // run/test idle
//; Compare TCE, CPUSUSP, RW=read
//SETREG_16BITS W:0x0000 R:0x0301 M:0x3fdb ;w:0000
                 > JTAG              1 1 1 1 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO1 15
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO0 14
                 > JTAG              1 1 0 0 L 1  ; // RELEASE_LBYTE1 13
                 > JTAG              1 1 0 0 L 1  ; // RELEASE_LBYTE0 12
                 > JTAG              1 1 0 0 L 1  ; // POR 11
                 > JTAG              1 1 0 0 L 1  ; // TCE1 10
                 > JTAG              1 1 0 0 H 1  ; // TCE0 9
                 > JTAG              1 1 0 0 H 1  ; // CPUSUSP 8
                 > JTAG              1 1 0 0 L 1  ; // INSTR_LOAD 7
                 > JTAG              1 1 0 0 L 1  ; // SECVAHD 6
                 > JTAG              1 1 0 0 X 1  ; // CPUOFF 5
                 > JTAG              1 1 0 0 L 1  ; // BYTE 4
                 > JTAG              1 1 0 0 L 1  ; // WAIT 3
                 > JTAG              1 1 0 0 X 1  ; // INTREQ 2
                 > JTAG              1 1 0 0 L 1  ; // HALT 1
                 > JTAG              1 1 1 0 H 1  ; // RW 0
                 > JTAG              1 1 1 1 X 1  ; // update
                 > JTAG              1 1 0 1 X 1  ; // back to idle
//;    // Read Memory
                 > TCLK_STATIC       1 0 0 0 X 1  ; // TCLKset0
//; assert RW signal
// CNTRL_SIG_16BIT B:0x13
//JTAGCmd_following
                 > JTAG              1 1 1 0 X 1  ; // CNTRL_SIG_16BIT
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 1 H 1  ; //-----LSB
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 1 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 1 0 H 1  ; //-----MSB
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // run/test idle
//; Set TCE=10, CPUSUSP, Byte=0, RW=read
//SETREG_16BITS W:0x0501 R:0x0000 M:0x0000 ;w:0501
                 > JTAG              1 1 1 0 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO1 15
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO0 14
                 > JTAG              1 1 0 0 X 1  ; // RELEASE_LBYTE1 13
                 > JTAG              1 1 0 0 X 1  ; // RELEASE_LBYTE0 12
                 > JTAG              1 1 0 0 X 1  ; // POR 11
                 > JTAG              1 1 0 1 X 1  ; // TCE1 10
                 > JTAG              1 1 0 0 X 1  ; // TCE0 9
                 > JTAG              1 1 0 1 X 1  ; // CPUSUSP 8
                 > JTAG              1 1 0 0 X 1  ; // INSTR_LOAD 7
                 > JTAG              1 1 0 0 X 1  ; // SECVAHD 6
                 > JTAG              1 1 0 0 X 1  ; // CPUOFF 5
                 > JTAG              1 1 0 0 X 1  ; // BYTE 4
                 > JTAG              1 1 0 0 X 1  ; // WAIT 3
                 > JTAG              1 1 0 0 X 1  ; // INTREQ 2
                 > JTAG              1 1 0 0 X 1  ; // HALT 1
                 > JTAG              1 1 1 1 X 1  ; // RW 0
                 > JTAG              1 1 1 0 X 1  ; // update
                 > JTAG              1 1 0 0 X 1  ; // back to idle
//;// Begin Loop
// ADDR_16BIT B:0x83
//JTAGCmd_following
                 > JTAG              1 1 1 0 X 1  ; // ADDR_16BIT
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 1 H 1  ; //-----LSB
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 1 1 H 1  ; //-----MSB
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // run/test idle
//SETREG_20BITS D:0x4400 R:0x0000 M:0x0000 ;d:4400
                 > JTAG              1 1 1 0 X 1  ; // SETREG_20BITS
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 19
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 18
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 17
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 16
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 15
                 > JTAG              1 1 0 1 X 1  ; // ADR Bit 14
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 13
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 12
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 11
                 > JTAG              1 1 0 1 X 1  ; // ADR Bit 10
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 9
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 8
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 7
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 6
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 5
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 4
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 3
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 2
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 1
                 > JTAG              1 1 1 0 X 1  ; // ADR Bit 0
                 > JTAG              1 1 1 0 X 1  ; // update
                 > JTAG              1 1 0 0 X 1  ; // back to idle
                 > TCLK_STATIC       1 0 0 1 X 1  ; // TCLKset1
                 > TCLK_STATIC       1 0 0 0 X 1  ; // TCLKset0
// DATA_CAPTURE B:0x42
//JTAGCmd_following
                 > JTAG              1 1 1 0 X 1  ; // DATA_CAPTURE
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 H 1  ; //-----LSB
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 1 0 H 1  ; //-----MSB
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // run/test idle
//SETREG_16BITS W:0x0000 R:0x5555 M:0xFFFF ;w:0000
                 > JTAG              1 1 1 0 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 C 1  ; // Bit 15
                 > JTAG              1 1 0 0 C 1  ; // Bit 14
                 > JTAG              1 1 0 0 C 1  ; // Bit 13
                 > JTAG              1 1 0 0 C 1  ; // Bit 12
                 > JTAG              1 1 0 0 C 1  ; // Bit 11
                 > JTAG              1 1 0 0 C 1  ; // Bit 10
                 > JTAG              1 1 0 0 C 1  ; // Bit 9
                 > JTAG              1 1 0 0 C 1  ; // Bit 8
                 > JTAG              1 1 0 0 C 1  ; // Bit 7
                 > JTAG              1 1 0 0 C 1  ; // Bit 6
                 > JTAG              1 1 0 0 C 1  ; // Bit 5
                 > JTAG              1 1 0 0 C 1  ; // Bit 4
                 > JTAG              1 1 0 0 C 1  ; // Bit 3
                 > JTAG              1 1 0 0 C 1  ; // Bit 2
                 > JTAG              1 1 0 0 C 1  ; // Bit 1
                 > JTAG              1 1 1 0 C 1  ; // Bit 0
                 > JTAG              1 1 1 0 X 1  ; // update
                 > JTAG              1 1 0 0 X 1  ; // back to idle
//;// End loop
                 > TCLK_STATIC       1 0 0 1 X 1  ; // TCLKset1
//;// one or more cycle, so CPU is driving correct MAB
//
                 > TCLK              1 0 0 0 X 1  ; // TCLK
//#include "i_ReadMemWord.edt" 4402 5555 FFFF
//;*****************************************************************************
//; EDT Macro for JTAG/EEM verification
//; Name:        ReadMemWord
//; Description:
//; This macro reads one word from a dedicated memory address.
//; Parameter:
//;  $1 : Address to be read from (20bit)
//;  $2 : Expected Data value (16bit)
//;  $3 : Mask for expected Data value (16bit)
//;*****************************************************************************
//;
//;          _________                    _____             _____       ______
//; IFCLK             |__________________|     |___________|     |_____|
//;
//; BYTE     XXXXXXXXXXXXXXX__________________________________________________
//;                         __________________________________________________
//; RW       XXXXXXXXXXXXXXX
//;                                 _________________
//; MAB      XXXXXXXXXXXXXXXXXXXXXXX_________________XXXXXXXXXXXXXXXXXXXXXXXXX
//;                                        __________________
//; MDB      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX__________________XXXXXXXXXXXXXXXXX
//;
//;            CHK    TCLK  SET    SET   TCLK  TCLK  CHK   TCLK  TCLK  TCLK
//;            CNTRL  0     CNTRL  ADDR  1     0     DATA  1     0     1
//;
//; EDT syntax
//;    // Check Init State
// CNTRL_SIG_CAPTURE B:0x14
//JTAGCmd_following
                 > JTAG              1 1 1 1 X 1  ; // CNTRL_SIG_CAPTURE
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 0 H 1  ; //-----LSB
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 1 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 1 0 H 1  ; //-----MSB
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; // run/test idle
//; Compare TCE, CPUSUSP, RW=read
//SETREG_16BITS W:0x0000 R:0x0301 M:0x3fdb ;w:0000
                 > JTAG              1 1 1 1 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO1 15
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO0 14
                 > JTAG              1 1 0 0 L 1  ; // RELEASE_LBYTE1 13
                 > JTAG              1 1 0 0 L 1  ; // RELEASE_LBYTE0 12
                 > JTAG              1 1 0 0 L 1  ; // POR 11
                 > JTAG              1 1 0 0 L 1  ; // TCE1 10
                 > JTAG              1 1 0 0 H 1  ; // TCE0 9
                 > JTAG              1 1 0 0 H 1  ; // CPUSUSP 8
                 > JTAG              1 1 0 0 L 1  ; // INSTR_LOAD 7
                 > JTAG              1 1 0 0 L 1  ; // SECVAHD 6
                 > JTAG              1 1 0 0 X 1  ; // CPUOFF 5
                 > JTAG              1 1 0 0 L 1  ; // BYTE 4
                 > JTAG              1 1 0 0 L 1  ; // WAIT 3
                 > JTAG              1 1 0 0 X 1  ; // INTREQ 2
                 > JTAG              1 1 0 0 L 1  ; // HALT 1
                 > JTAG              1 1 1 0 H 1  ; // RW 0
                 > JTAG              1 1 1 1 X 1  ; // update
                 > JTAG              1 1 0 1 X 1  ; // back to idle
//;    // Read Memory
                 > TCLK_STATIC       1 0 0 0 X 1  ; // TCLKset0
//; assert RW signal
// CNTRL_SIG_16BIT B:0x13
//JTAGCmd_following
                 > JTAG              1 1 1 0 X 1  ; // CNTRL_SIG_16BIT
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 1 H 1  ; //-----LSB
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 1 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 1 0 H 1  ; //-----MSB
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // run/test idle
//; Set TCE=10, CPUSUSP, Byte=0, RW=read
//SETREG_16BITS W:0x0501 R:0x0000 M:0x0000 ;w:0501
                 > JTAG              1 1 1 0 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO1 15
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO0 14
                 > JTAG              1 1 0 0 X 1  ; // RELEASE_LBYTE1 13
                 > JTAG              1 1 0 0 X 1  ; // RELEASE_LBYTE0 12
                 > JTAG              1 1 0 0 X 1  ; // POR 11
                 > JTAG              1 1 0 1 X 1  ; // TCE1 10
                 > JTAG              1 1 0 0 X 1  ; // TCE0 9
                 > JTAG              1 1 0 1 X 1  ; // CPUSUSP 8
                 > JTAG              1 1 0 0 X 1  ; // INSTR_LOAD 7
                 > JTAG              1 1 0 0 X 1  ; // SECVAHD 6
                 > JTAG              1 1 0 0 X 1  ; // CPUOFF 5
                 > JTAG              1 1 0 0 X 1  ; // BYTE 4
                 > JTAG              1 1 0 0 X 1  ; // WAIT 3
                 > JTAG              1 1 0 0 X 1  ; // INTREQ 2
                 > JTAG              1 1 0 0 X 1  ; // HALT 1
                 > JTAG              1 1 1 1 X 1  ; // RW 0
                 > JTAG              1 1 1 0 X 1  ; // update
                 > JTAG              1 1 0 0 X 1  ; // back to idle
//;// Begin Loop
// ADDR_16BIT B:0x83
//JTAGCmd_following
                 > JTAG              1 1 1 0 X 1  ; // ADDR_16BIT
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 1 H 1  ; //-----LSB
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 1 1 H 1  ; //-----MSB
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // run/test idle
//SETREG_20BITS D:0x4402 R:0x0000 M:0x0000 ;d:4402
                 > JTAG              1 1 1 0 X 1  ; // SETREG_20BITS
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 19
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 18
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 17
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 16
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 15
                 > JTAG              1 1 0 1 X 1  ; // ADR Bit 14
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 13
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 12
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 11
                 > JTAG              1 1 0 1 X 1  ; // ADR Bit 10
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 9
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 8
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 7
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 6
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 5
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 4
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 3
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 2
                 > JTAG              1 1 0 1 X 1  ; // ADR Bit 1
                 > JTAG              1 1 1 0 X 1  ; // ADR Bit 0
                 > JTAG              1 1 1 0 X 1  ; // update
                 > JTAG              1 1 0 0 X 1  ; // back to idle
                 > TCLK_STATIC       1 0 0 1 X 1  ; // TCLKset1
                 > TCLK_STATIC       1 0 0 0 X 1  ; // TCLKset0
// DATA_CAPTURE B:0x42
//JTAGCmd_following
                 > JTAG              1 1 1 0 X 1  ; // DATA_CAPTURE
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 H 1  ; //-----LSB
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 1 0 H 1  ; //-----MSB
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // run/test idle
//SETREG_16BITS W:0x0000 R:0x5555 M:0xFFFF ;w:0000
                 > JTAG              1 1 1 0 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 C 1  ; // Bit 15
                 > JTAG              1 1 0 0 C 1  ; // Bit 14
                 > JTAG              1 1 0 0 C 1  ; // Bit 13
                 > JTAG              1 1 0 0 C 1  ; // Bit 12
                 > JTAG              1 1 0 0 C 1  ; // Bit 11
                 > JTAG              1 1 0 0 C 1  ; // Bit 10
                 > JTAG              1 1 0 0 C 1  ; // Bit 9
                 > JTAG              1 1 0 0 C 1  ; // Bit 8
                 > JTAG              1 1 0 0 C 1  ; // Bit 7
                 > JTAG              1 1 0 0 C 1  ; // Bit 6
                 > JTAG              1 1 0 0 C 1  ; // Bit 5
                 > JTAG              1 1 0 0 C 1  ; // Bit 4
                 > JTAG              1 1 0 0 C 1  ; // Bit 3
                 > JTAG              1 1 0 0 C 1  ; // Bit 2
                 > JTAG              1 1 0 0 C 1  ; // Bit 1
                 > JTAG              1 1 1 0 C 1  ; // Bit 0
                 > JTAG              1 1 1 0 X 1  ; // update
                 > JTAG              1 1 0 0 X 1  ; // back to idle
//;// End loop
                 > TCLK_STATIC       1 0 0 1 X 1  ; // TCLKset1
//;// one or more cycle, so CPU is driving correct MAB
//
                 > TCLK              1 0 0 0 X 1  ; // TCLK
//; Set PC to safe address
//#include "i_SetPc.edt" 0080 0000
//;*****************************************************************************
//; EDT Macro for JTAG/EEM verification
//; Name:        SetPc
//; Description:
//; This macro sets the PC to a dedicated value.
//;
//; ATTENTION: Use this macro with extreme caution, because it doesn't flush
//;            the CPU pipeline after setting the PC. This is only useful for
//;            testcases/patterns that execute code from the CPU
//;
//; Parameter:
//;  $1 : MOVA opcode including PC value high nibble (19:16) at position (11:8)
//;  $2 : PC value low word (15:0)
//;*****************************************************************************
//; EDT syntax
//;    // Check Init State
// CNTRL_SIG_CAPTURE B:0x14
//JTAGCmd_following
                 > JTAG              1 1 1 1 X 1  ; // CNTRL_SIG_CAPTURE
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 0 H 1  ; //-----LSB
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 1 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 1 0 H 1  ; //-----MSB
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; // run/test idle
//; Compare TCE, CPUSUSP, RW=read
//SETREG_16BITS W:0x0000 R:0x0301 M:0x3fdb ;w:0000
                 > JTAG              1 1 1 1 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO1 15
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO0 14
                 > JTAG              1 1 0 0 L 1  ; // RELEASE_LBYTE1 13
                 > JTAG              1 1 0 0 L 1  ; // RELEASE_LBYTE0 12
                 > JTAG              1 1 0 0 L 1  ; // POR 11
                 > JTAG              1 1 0 0 L 1  ; // TCE1 10
                 > JTAG              1 1 0 0 H 1  ; // TCE0 9
                 > JTAG              1 1 0 0 H 1  ; // CPUSUSP 8
                 > JTAG              1 1 0 0 L 1  ; // INSTR_LOAD 7
                 > JTAG              1 1 0 0 L 1  ; // SECVAHD 6
                 > JTAG              1 1 0 0 X 1  ; // CPUOFF 5
                 > JTAG              1 1 0 0 L 1  ; // BYTE 4
                 > JTAG              1 1 0 0 L 1  ; // WAIT 3
                 > JTAG              1 1 0 0 X 1  ; // INTREQ 2
                 > JTAG              1 1 0 0 L 1  ; // HALT 1
                 > JTAG              1 1 1 0 H 1  ; // RW 0
                 > JTAG              1 1 1 1 X 1  ; // update
                 > JTAG              1 1 0 1 X 1  ; // back to idle
//;    // MOVA #imm20, PC
                 > TCLK_STATIC       1 0 0 0 X 1  ; // TCLKset0
//;    // take over bus control during clock LOW phase
// DATA_16BIT B:0x41
//JTAGCmd_following
                 > JTAG              1 1 1 0 X 1  ; // DATA_16BIT
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 1 H 1  ; //-----LSB
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 1 0 H 1  ; //-----MSB
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // run/test idle
                 > TCLK_STATIC       1 0 0 1 X 1  ; // TCLKset1
//SETREG_16BITS W:0x0080 R:0x0000 M:0x0000 ;w:0080
                 > JTAG              1 1 1 1 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // Bit 15
                 > JTAG              1 1 0 0 X 1  ; // Bit 14
                 > JTAG              1 1 0 0 X 1  ; // Bit 13
                 > JTAG              1 1 0 0 X 1  ; // Bit 12
                 > JTAG              1 1 0 0 X 1  ; // Bit 11
                 > JTAG              1 1 0 0 X 1  ; // Bit 10
                 > JTAG              1 1 0 0 X 1  ; // Bit 9
                 > JTAG              1 1 0 0 X 1  ; // Bit 8
                 > JTAG              1 1 0 1 X 1  ; // Bit 7
                 > JTAG              1 1 0 0 X 1  ; // Bit 6
                 > JTAG              1 1 0 0 X 1  ; // Bit 5
                 > JTAG              1 1 0 0 X 1  ; // Bit 4
                 > JTAG              1 1 0 0 X 1  ; // Bit 3
                 > JTAG              1 1 0 0 X 1  ; // Bit 2
                 > JTAG              1 1 0 0 X 1  ; // Bit 1
                 > JTAG              1 1 1 0 X 1  ; // Bit 0
                 > JTAG              1 1 1 1 X 1  ; // update
                 > JTAG              1 1 0 1 X 1  ; // back to idle
// CNTRL_SIG_16BIT B:0x13
//JTAGCmd_following
                 > JTAG              1 1 1 1 X 1  ; // CNTRL_SIG_16BIT
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 H 1  ; //-----LSB
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 1 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 1 0 H 1  ; //-----MSB
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; // run/test idle
//; Set RelLBYTE=01, TCE=10
//SETREG_16BITS W:0x1400 R:0x0000 M:0x0000 ;w:1400
                 > JTAG              1 1 1 1 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO1 15
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO0 14
                 > JTAG              1 1 0 0 X 1  ; // RELEASE_LBYTE1 13
                 > JTAG              1 1 0 1 X 1  ; // RELEASE_LBYTE0 12
                 > JTAG              1 1 0 0 X 1  ; // POR 11
                 > JTAG              1 1 0 1 X 1  ; // TCE1 10
                 > JTAG              1 1 0 0 X 1  ; // TCE0 9
                 > JTAG              1 1 0 0 X 1  ; // CPUSUSP 8
                 > JTAG              1 1 0 0 X 1  ; // INSTR_LOAD 7
                 > JTAG              1 1 0 0 X 1  ; // SECVAHD 6
                 > JTAG              1 1 0 0 X 1  ; // CPUOFF 5
                 > JTAG              1 1 0 0 X 1  ; // BYTE 4
                 > JTAG              1 1 0 0 X 1  ; // WAIT 3
                 > JTAG              1 1 0 0 X 1  ; // INTREQ 2
                 > JTAG              1 1 0 0 X 1  ; // HALT 1
                 > JTAG              1 1 1 0 X 1  ; // RW 0
                 > JTAG              1 1 1 1 X 1  ; // update
                 > JTAG              1 1 0 1 X 1  ; // back to idle
// DATA_16BIT B:0x41
//JTAGCmd_following
                 > JTAG              1 1 1 1 X 1  ; // DATA_16BIT
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 H 1  ; //-----LSB
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 1 0 H 1  ; //-----MSB
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; // run/test idle
//
                 > TCLK              1 0 0 0 X 1  ; // TCLK
//SETREG_16BITS W:0x0000 R:0x0000 M:0x0000 ;w:0000
                 > JTAG              1 1 1 1 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // Bit 15
                 > JTAG              1 1 0 0 X 1  ; // Bit 14
                 > JTAG              1 1 0 0 X 1  ; // Bit 13
                 > JTAG              1 1 0 0 X 1  ; // Bit 12
                 > JTAG              1 1 0 0 X 1  ; // Bit 11
                 > JTAG              1 1 0 0 X 1  ; // Bit 10
                 > JTAG              1 1 0 0 X 1  ; // Bit 9
                 > JTAG              1 1 0 0 X 1  ; // Bit 8
                 > JTAG              1 1 0 0 X 1  ; // Bit 7
                 > JTAG              1 1 0 0 X 1  ; // Bit 6
                 > JTAG              1 1 0 0 X 1  ; // Bit 5
                 > JTAG              1 1 0 0 X 1  ; // Bit 4
                 > JTAG              1 1 0 0 X 1  ; // Bit 3
                 > JTAG              1 1 0 0 X 1  ; // Bit 2
                 > JTAG              1 1 0 0 X 1  ; // Bit 1
                 > JTAG              1 1 1 0 X 1  ; // Bit 0
                 > JTAG              1 1 1 1 X 1  ; // update
                 > JTAG              1 1 0 1 X 1  ; // back to idle
//
                 > TCLK              1 0 0 0 X 1  ; // TCLK
//SETREG_16BITS W:0x4303 R:0x0000 M:0x0000 ;w:4303
                 > JTAG              1 1 1 1 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // Bit 15
                 > JTAG              1 1 0 1 X 1  ; // Bit 14
                 > JTAG              1 1 0 0 X 1  ; // Bit 13
                 > JTAG              1 1 0 0 X 1  ; // Bit 12
                 > JTAG              1 1 0 0 X 1  ; // Bit 11
                 > JTAG              1 1 0 0 X 1  ; // Bit 10
                 > JTAG              1 1 0 1 X 1  ; // Bit 9
                 > JTAG              1 1 0 1 X 1  ; // Bit 8
                 > JTAG              1 1 0 0 X 1  ; // Bit 7
                 > JTAG              1 1 0 0 X 1  ; // Bit 6
                 > JTAG              1 1 0 0 X 1  ; // Bit 5
                 > JTAG              1 1 0 0 X 1  ; // Bit 4
                 > JTAG              1 1 0 0 X 1  ; // Bit 3
                 > JTAG              1 1 0 0 X 1  ; // Bit 2
                 > JTAG              1 1 0 1 X 1  ; // Bit 1
                 > JTAG              1 1 1 1 X 1  ; // Bit 0
                 > JTAG              1 1 1 1 X 1  ; // update
                 > JTAG              1 1 0 1 X 1  ; // back to idle
                 > TCLK_STATIC       1 0 0 0 X 1  ; // TCLKset0
// ADDR_CAPTURE B:0x84
//JTAGCmd_following
                 > JTAG              1 1 1 0 X 1  ; // ADDR_CAPTURE
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 H 1  ; //-----LSB
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 1 1 H 1  ; //-----MSB
                 > JTAG              1 1 1 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // run/test idle
//SETREG_20BITS D:0x00000 R:0x0000 M:0x0000 ;d:00000
                 > JTAG              1 1 1 0 X 1  ; // SETREG_20BITS
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 15
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 14
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 13
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 12
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 11
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 10
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 9
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 8
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 7
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 6
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 5
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 4
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 3
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 2
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 1
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 0
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 19
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 18
                 > JTAG              1 1 0 0 X 1  ; // ADR Bit 17
                 > JTAG              1 1 1 0 X 1  ; // ADR Bit 16
                 > JTAG              1 1 1 0 X 1  ; // update
                 > JTAG              1 1 0 0 X 1  ; // back to idle
                 > TCLK_STATIC       1 0 0 1 X 1  ; // TCLKset1
// CNTRL_SIG_16BIT B:0x13
//JTAGCmd_following
                 > JTAG              1 1 1 1 X 1  ; // CNTRL_SIG_16BIT
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 H 1  ; //-----LSB
                 > JTAG              1 1 0 1 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 H 1  ; 
                 > JTAG              1 1 0 1 H 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 0 0 L 1  ; 
                 > JTAG              1 1 1 0 H 1  ; //-----MSB
                 > JTAG              1 1 1 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; // run/test idle
//; Set TCE=10, CPUSUSP, RW=read
//SETREG_16BITS W:0x0501 R:0x0000 M:0x0000 ;w:0501
                 > JTAG              1 1 1 1 X 1  ; // SETREG_16BITS
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 1 X 1  ; 
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO1 15
                 > JTAG              1 1 0 0 X 1  ; // INSTR_SEQ_NO0 14
                 > JTAG              1 1 0 0 X 1  ; // RELEASE_LBYTE1 13
                 > JTAG              1 1 0 0 X 1  ; // RELEASE_LBYTE0 12
                 > JTAG              1 1 0 0 X 1  ; // POR 11
                 > JTAG              1 1 0 1 X 1  ; // TCE1 10
                 > JTAG              1 1 0 0 X 1  ; // TCE0 9
                 > JTAG              1 1 0 1 X 1  ; // CPUSUSP 8
                 > JTAG              1 1 0 0 X 1  ; // INSTR_LOAD 7
                 > JTAG              1 1 0 0 X 1  ; // SECVAHD 6
                 > JTAG              1 1 0 0 X 1  ; // CPUOFF 5
                 > JTAG              1 1 0 0 X 1  ; // BYTE 4
                 > JTAG              1 1 0 0 X 1  ; // WAIT 3
                 > JTAG              1 1 0 0 X 1  ; // INTREQ 2
                 > JTAG              1 1 0 0 X 1  ; // HALT 1
                 > JTAG              1 1 1 1 X 1  ; // RW 0
                 > JTAG              1 1 1 1 X 1  ; // update
                 > JTAG              1 1 0 1 X 1  ; // back to idle
// end of test body 
halt             > JTAG              1 0 0 1 X 1  ;
ign              > JTAG              1 0 0 1 X 1  ; // dummy vector
}
